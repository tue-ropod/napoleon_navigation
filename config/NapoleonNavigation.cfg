#!/usr/bin/env python
PACKAGE = "napoleon_navigation"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#                                                                       Def.  Min. Max.
gen.add("size_side", double_t, 0, "How wide vehicle is from center [m]", 0.36, 0.0, 5.0)
gen.add("ropod_length", double_t, 0, "Ropod length [m]", 0.65, 0.01, 5.0)
gen.add("feeler_size", double_t, 0, "Size of feeler (used to predict where ropod goes if it goes straight) [m]", 1.5, 0.0, 10.0)
gen.add("feeler_size_steering", double_t, 0, "Size of feeler when steering [m]", 1.0, 0.0, 10.0)
gen.add("env_tctw_size", double_t, 0, "Too close to wall area size [m]", 0.1, 0.0, 10.0)
gen.add("env_trns_size", double_t, 0, "Transition area size [m]", 0.2, 0.0, 10.0)
gen.add("carrot_length_feeler_offset", double_t, 0, "carrot_length = feeler + offset, where carrot_length is how far ahead point lies where ropod steers towards when too close to a wall [m]", 0.5, 0.0, 10.0)
gen.add("d_ax", double_t, 0, "Length from rear axle to front steering point [m]", 1.045, 0.0, 10.0)
gen.add("size_rear", double_t, 0, "How far vehicle extends behind rear axle [m]", 0.1, 0.0, 10.0)
gen.add("env_trns_size_cornering", double_t, 0, "Transition area size while cornering [m]", 0.3, 0.0, 10.0)
gen.add("v_cruising", double_t, 0, "Max velocity while cruising [m/s]", 1.1, 0.0, 10.0)
gen.add("v_inter_turning", double_t, 0, "Max velocity when taking a turn [m/s]", 0.7, 0.0, 10.0)
gen.add("v_steersaturation", double_t, 0, "Velocity during steering saturation [m/s]", 0.6, 0.0, 10.0)
gen.add("v_overtake", double_t, 0, "Velocity during overtaking [m/s]", 1.0, 0.0, 10.0)
gen.add("delta_dot_limit", double_t, 0, "Max steering rate per second [rad/s]", 1.0, 0.0, 10.0)
gen.add("a_max", double_t, 0, "Max acceleration [m/s/s]", 0.7, 0.0, 10.0)
gen.add("v_obs_overtake_max", double_t, 0, "Max speed an obstacle can have to overtake it [m/s]", 0.1, 0.0, 10.0)
gen.add("min_dist_to_overtake", double_t, 0, "Don't start earlier than x meters to overtake [m]", 2.5, 0.0, 10.0)
gen.add("start_steering_early_right", double_t, 0, "Start steering earlier by x [m]", 0.3, 0.0, 10.0)
gen.add("start_steering_early_left", double_t, 0, "Start steering earlier by x [m]", 0.3, 0.0, 10.0)
gen.add("rotated_enough_thres", double_t, 0, "Stop turning when within x rad of the new corridor [rad]", 0.94, 0.0, 6.28)

gen.add("t_min_pred", double_t, 0, "Predict for n seconds (unless we want to predict an area) [s]", 10.0, 1.0, 100.0)
gen.add("t_pred_wall_collision", double_t, 0, "Predict for n seconds if ropod collides with walls [s]", 5.0, 1.0, 100.0)
gen.add("t_pred_obs_collision", double_t, 0, "Predict for n seconds if ropod collides with obstacles [s]", 4.0, 1.0, 100.0)
gen.add("cutoff_freq", double_t, 0, "Cutoff frequency for low pass filter to simulate steering delay [Hz]", 1.0, 0.1, 10.0)

gen.add("obs_avoid_margin", double_t, 0, "Margin between ropod and obstacles at full speed [m]", 0.1, 0.01, 20.0)
gen.add("obs_avoid_margin_front", double_t, 0, "Margin between ropod front and obstacles at full speed [m]", 0.15, 0.01, 20.0)
gen.add("dilate_ropod_aligning", double_t, 0, "Dilation from center (so actually this value -size_size if measure from side of vehicle) [m]", 0.9, 0.01, 20.0)
gen.add("reached_target_threshold", double_t, 0, "When x [m] removed from center of last hallway, program finished", 2.0, 0.01, 20.0)
gen.add("entry_length", double_t, 0, "Length of entries before intersections [m]", 2.0, 0.01, 20.0)
gen.add("sharp_angle_threshold", double_t, 0, "Angle how much the next hallway must be sharper than perpendicular to be considered sharp [rad]", 0.1, 0.0, 6.28)
gen.add("is_load_attached", bool_t, 0, "Is the load attached?", False)


exit(gen.generate(PACKAGE, "napoleon_navigation", "NapoleonNavigation"))
